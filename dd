<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ŸÜÿ∏ÿßŸÖ ÿ•ÿØÿßÿ±ÿ© ŸÜŸÇÿßÿ∑ ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ - ŸÖŸàŸÇÿπ ŸàŸäÿ®</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Cairo:wght@300;400;600;700;900&display=swap');
        
        :root {
            --primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success: linear-gradient(135deg, #4ecdc4 0%, #44a08d 100%);
            --warning: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
            --danger: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            --glass: rgba(255, 255, 255, 0.1);
            --glass-border: rgba(255, 255, 255, 0.2);
            --shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            --text-primary: #2c3e50;
            --text-light: #ffffff;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Cairo', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            min-height: 100vh;
            padding: 20px;
            position: relative;
        }
        
        /* ÿ™ÿ£ÿ´Ÿäÿ± ÿßŸÑÿÆŸÑŸÅŸäÿ© ÿßŸÑŸÖÿ™ÿ≠ÿ±ŸÉÿ© */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%);
            z-index: -1;
            animation: backgroundMove 15s ease-in-out infinite;
        }
        
        @keyframes backgroundMove {
            0%, 100% { transform: scale(1) rotate(0deg); }
            50% { transform: scale(1.1) rotate(180deg); }
        }
        
        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            background: var(--glass);
            backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            border-radius: 25px;
            box-shadow: var(--shadow);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: var(--text-light);
            padding: 30px;
            text-align: center;
            position: relative;
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
            opacity: 0.3;
        }
        
        .header h1 {
            font-size: 2.8em;
            font-weight: 900;
            margin-bottom: 10px;
            position: relative;
            z-index: 2;
        }
        
        .header .subtitle {
            font-size: 1.2em;
            opacity: 0.9;
            position: relative;
            z-index: 2;
        }
        
        .status-bar {
            background: var(--danger);
            padding: 15px 30px;
            text-align: center;
            color: var(--text-primary);
            font-weight: 600;
        }
        
        .status-online {
            background: var(--success);
            color: var(--text-light);
        }
        
        .auth-panel {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px 30px;
            text-align: center;
            border-bottom: 1px solid var(--glass-border);
        }
        
        .navigation {
            display: flex;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            overflow-x: auto;
            padding: 10px;
        }
        
        .nav-item {
            flex: 1;
            min-width: 150px;
            padding: 18px 12px;
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            margin: 0 5px;
            color: var(--text-light);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
        }
        
        .nav-item:hover, .nav-item.active {
            background: linear-gradient(135deg, #FFD700, #FFA500);
            color: var(--text-primary);
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(255, 215, 0, 0.4);
        }
        
        .content-area {
            padding: 40px 30px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            min-height: 500px;
        }
        
        .section {
            display: none;
        }
        
        .section.active {
            display: block;
            animation: fadeIn 0.5s ease-in-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .section-title {
            font-size: 2.2em;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 30px;
            text-align: center;
            position: relative;
        }
        
        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 4px;
            background: var(--secondary);
            border-radius: 2px;
        }
        
        .card {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-primary);
        }
        
        .input-field {
            width: 100%;
            padding: 12px 18px;
            border: 2px solid transparent;
            border-radius: 12px;
            font-size: 16px;
            background: rgba(255, 255, 255, 0.9);
            transition: all 0.3s ease;
        }
        
        .input-field:focus {
            border-color: #667eea;
            outline: none;
            background: rgba(255, 255, 255, 1);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
        }
        
        .btn {
            background: var(--primary);
            color: var(--text-light);
            padding: 12px 25px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }
        
        .btn-success {
            background: var(--success);
        }
        
        .btn-danger {
            background: var(--danger);
            color: var(--text-primary);
        }
        
        .btn-warning {
            background: var(--warning);
            color: var(--text-primary);
        }
        
        .data-table {
            width: 100%;
            border-collapse: collapse;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
        }
        
        .data-table th {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: var(--text-light);
            padding: 18px 15px;
            font-weight: 600;
            text-align: center;
        }
        
        .data-table td {
            padding: 15px;
            text-align: center;
            border-bottom: 1px solid #eee;
        }
        
        .data-table tr:hover td {
            background: rgba(102, 126, 234, 0.1);
        }
        
        .points-input {
            width: 70px;
            padding: 8px;
            border: 2px solid #667eea;
            border-radius: 8px;
            text-align: center;
            font-weight: 600;
        }
        
        .hero-section {
            background: linear-gradient(135deg, #FFD700 0%, #FFA500 100%);
            color: var(--text-primary);
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            margin-bottom: 30px;
            position: relative;
            overflow: hidden;
        }
        
        .hero-section::before {
            content: 'üèÜ';
            position: absolute;
            top: -20px;
            right: -20px;
            font-size: 8em;
            opacity: 0.2;
            animation: float 3s ease-in-out infinite;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: var(--success);
            color: var(--text-light);
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .stat-value {
            font-size: 2.5em;
            font-weight: 900;
            margin-bottom: 8px;
        }
        
        .leaders-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .leader-card {
            background: var(--primary);
            color: var(--text-light);
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s ease;
        }
        
        .leader-card:hover {
            transform: translateY(-8px) scale(1.02);
        }
        
        .categories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 25px;
        }
        
        .category-card {
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            color: var(--text-light);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s ease;
        }
        
        .category-card:hover {
            transform: translateY(-5px);
        }
        
        .alert {
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            font-weight: 600;
            text-align: center;
        }
        
        .alert-success {
            background: var(--success);
            color: var(--text-light);
        }
        
        .alert-error {
            background: var(--danger);
            color: var(--text-primary);
        }
        
        .hidden { display: none !important; }
        
        .offline-notice {
            background: #ff6b6b;
            color: white;
            padding: 10px;
            text-align: center;
            font-weight: bold;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .main-container {
                margin: 10px;
                border-radius: 15px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .navigation {
                flex-direction: column;
                gap: 10px;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }
        }
        
        /* ÿ≠ÿßŸÑÿ© ÿπÿØŸÖ ÿßŸÑÿßÿ™ÿµÿßŸÑ */
        body.offline .status-bar {
            background: #ff6b6b;
            color: white;
        }
        
        body.offline .status-bar::before {
            content: '‚ö†Ô∏è ÿ∫Ÿäÿ± ŸÖÿ™ÿµŸÑ - ';
        }
    </style>
</head>
<body>
    <div class="main-container">
        <div class="header">
            <h1>üåê ŸÖŸÜÿµÿ© ÿ•ÿØÿßÿ±ÿ© ŸÜŸÇÿßÿ∑ ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ</h1>
            <p class="subtitle">ŸÜÿ∏ÿßŸÖ ŸàŸäÿ® ŸÖÿ™ÿ∑Ÿàÿ± ŸÑÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ÿØÿßÿ° ŸàÿßŸÑÿ™ŸÇŸäŸäŸÖ</p>
        </div>
        
        <div class="status-bar" id="statusBar">
            üîí ÿ∫Ÿäÿ± ŸÖŸèŸÅÿπŸÑ - Ÿäÿ¨ÿ® ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ŸÉŸÖÿØŸäÿ±
        </div>
        
        <div class="auth-panel">
            <input type="password" id="adminPassword" class="input-field" placeholder="ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿßŸÑŸÖÿØŸäÿ±" style="width: 200px; margin-left: 10px;">
            <button class="btn btn-warning" onclick="toggleAdmin()">ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸàŸÑ/ÿÆÿ±Ÿàÿ¨</button>
            <span id="authStatus" style="margin-right: 15px; font-weight: bold;">üîí ŸÖÿ≠ÿ∏Ÿàÿ±</span>
        </div>
        
        <nav class="navigation">
            <a href="#" class="nav-item active" onclick="showSection('employees')">üë• ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ</a>
            <a href="#" class="nav-item" onclick="showSection('evaluation')">‚≠ê ÿßŸÑÿ™ŸÇŸäŸäŸÖ ÿßŸÑŸäŸàŸÖŸä</a>
            <a href="#" class="nav-item" onclick="showSection('dashboard')">üèÜ ŸÖŸàÿ∏ŸÅ ÿßŸÑÿ¥Ÿáÿ±</a>
            <a href="#" class="nav-item" onclick="showSection('analytics')">üìä ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™</a>
            <a href="#" class="nav-item" onclick="showSection('settings')">‚öôÔ∏è ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™</a>
        </nav>
        
        <div class="content-area">
            <!-- ŸÇÿ≥ŸÖ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ -->
            <section id="employees" class="section active">
                <h2 class="section-title">üë• ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ</h2>
                
                <div class="card hidden" id="addEmployeeCard">
                    <h3 style="margin-bottom: 20px;">‚ûï ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸàÿ∏ŸÅ ÿ¨ÿØŸäÿØ</h3>
                    <div class="form-grid">
                        <div class="input-group">
                            <label>ÿßÿ≥ŸÖ ÿßŸÑŸÖŸàÿ∏ŸÅ</label>
                            <input type="text" id="empName" class="input-field" placeholder="ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖ ÿßŸÑŸÖŸàÿ∏ŸÅ">
                        </div>
                        <div class="input-group">
                            <label>ÿßŸÑÿ±ŸÇŸÖ ÿßŸÑŸàÿ∏ŸäŸÅŸä</label>
                            <input type="text" id="empNumber" class="input-field" placeholder="ŸÖÿ´ÿßŸÑ: EMP001">
                        </div>
                        <div style="display: flex; align-items: end;">
                            <button class="btn btn-success" onclick="addEmployee()">ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸàÿ∏ŸÅ</button>
                        </div>
                    </div>
                </div>
                
                <table class="data-table" id="employeesTable">
                    <thead>
                        <tr>
                            <th>ÿßÿ≥ŸÖ ÿßŸÑŸÖŸàÿ∏ŸÅ</th>
                            <th>ÿßŸÑÿ±ŸÇŸÖ ÿßŸÑŸàÿ∏ŸäŸÅŸä</th>
                            <th>ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÜŸÇÿßÿ∑</th>
                            <th>ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™</th>
                        </tr>
                    </thead>
                    <tbody id="employeesBody">
                        <!-- ÿ≥Ÿäÿ™ŸÖ ŸÖŸÑÿ§Ÿáÿß ÿ®Ÿàÿßÿ≥ÿ∑ÿ© JavaScript -->
                    </tbody>
                </table>
            </section>
            
            <!-- ŸÇÿ≥ŸÖ ÿßŸÑÿ™ŸÇŸäŸäŸÖ ÿßŸÑŸäŸàŸÖŸä -->
            <section id="evaluation" class="section">
                <h2 class="section-title">‚≠ê ÿßŸÑÿ™ŸÇŸäŸäŸÖ ÿßŸÑŸäŸàŸÖŸä</h2>
                
                <div class="card">
                    <div class="form-grid">
                        <div class="input-group">
                            <label>ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÖŸàÿ∏ŸÅ</label>
                            <select id="selectedEmployee" class="input-field">
                                <option value="">ÿßÿÆÿ™ÿ± ŸÖŸàÿ∏ŸÅÿßŸã...</option>
                            </select>
                        </div>
                        <div class="input-group">
                            <label>ÿßŸÑÿ™ÿßÿ±ŸäÿÆ</label>
                            <input type="date" id="evaluationDate" class="input-field">
                        </div>
                    </div>
                </div>
                
                <div id="evaluationForm" class="hidden">
                    <h3 style="text-align: center; margin-bottom: 25px;">üìã ŸÅÿ¶ÿßÿ™ ÿßŸÑŸÜŸÇÿßÿ∑</h3>
                    <div class="categories-grid" id="categoriesGrid">
                        <!-- ÿ≥Ÿäÿ™ŸÖ ŸÖŸÑÿ§Ÿáÿß ÿ®Ÿàÿßÿ≥ÿ∑ÿ© JavaScript -->
                    </div>
                    
                    <div style="text-align: center; margin-top: 30px;">
                        <button class="btn btn-success hidden" id="saveEvaluationBtn" onclick="saveEvaluation()">üíæ ÿ≠ŸÅÿ∏ ÿßŸÑÿ™ŸÇŸäŸäŸÖ</button>
                    </div>
                </div>
            </section>
            
            <!-- ŸÇÿ≥ŸÖ ŸÖŸàÿ∏ŸÅ ÿßŸÑÿ¥Ÿáÿ± -->
            <section id="dashboard" class="section">
                <div class="hero-section">
                    <h2 style="font-size: 2.5em; margin-bottom: 15px;">üåü ŸÖŸàÿ∏ŸÅ ÿßŸÑÿ¥Ÿáÿ±</h2>
                    <div id="employeeOfMonth">
                        <h3 id="topEmployeeName" style="font-size: 2em; margin-bottom: 10px;">ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿ™ÿ≠ÿØŸäÿØ</h3>
                        <p id="topEmployeeScore" style="font-size: 1.3em;">ÿßŸÑŸÜŸÇÿßÿ∑: 0</p>
                    </div>
                </div>
                
                <h3 style="text-align: center; margin-bottom: 25px;">‚≠ê ÿ£ŸÅÿ∂ŸÑ 5 ŸÖŸàÿ∏ŸÅŸäŸÜ</h3>
                <div class="leaders-grid" id="leadersGrid">
                    <!-- ÿ≥Ÿäÿ™ŸÖ ŸÖŸÑÿ§Ÿáÿß ÿ®Ÿàÿßÿ≥ÿ∑ÿ© JavaScript -->
                </div>
            </section>
            
            <!-- ŸÇÿ≥ŸÖ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ -->
            <section id="analytics" class="section">
                <h2 class="section-title">üìä ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ŸàÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™</h2>
                
                <div class="card">
                    <label>ŸÜŸàÿπ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ:</label>
                    <select id="analyticsType" class="input-field" style="max-width: 300px;" onchange="updateAnalytics()">
                        <option value="weekly">ÿ£ÿ≥ÿ®ŸàÿπŸä</option>
                        <option value="monthly">ÿ¥Ÿáÿ±Ÿä</option>
                        <option value="yearly">ÿ≥ŸÜŸàŸä</option>
                    </select>
                </div>
                
                <div class="stats-grid" id="analyticsGrid">
                    <!-- ÿ≥Ÿäÿ™ŸÖ ŸÖŸÑÿ§Ÿáÿß ÿ®Ÿàÿßÿ≥ÿ∑ÿ© JavaScript -->
                </div>
            </section>
            
            <!-- ŸÇÿ≥ŸÖ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™ -->
            <section id="settings" class="section">
                <h2 class="section-title">‚öôÔ∏è ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™ ŸàÿßŸÑÿ™ÿÆÿµŸäÿµ</h2>
                
                <div class="card hidden" id="settingsCard">
                    <h3>üîß ŸÅÿ¶ÿßÿ™ ÿßŸÑŸÜŸÇÿßÿ∑</h3>
                    <div id="categoriesSettings">
                        <!-- ÿ≥Ÿäÿ™ŸÖ ŸÖŸÑÿ§Ÿáÿß ÿ®Ÿàÿßÿ≥ÿ∑ÿ© JavaScript -->
                    </div>
                    
                    <div style="text-align: center; margin-top: 25px;">
                        <button class="btn btn-warning" onclick="addNewCategory()">‚ûï ÿ•ÿ∂ÿßŸÅÿ© ŸÅÿ¶ÿ©</button>
                        <button class="btn btn-success" onclick="saveSettings()">üíæ ÿ≠ŸÅÿ∏ ÿßŸÑÿ™ÿ∫ŸäŸäÿ±ÿßÿ™</button>
                    </div>
                    
                    <hr style="margin: 30px 0;">
                    
                    <h3>üîê ÿßŸÑÿ£ŸÖÿßŸÜ</h3>
                    <div class="input-group" style="max-width: 400px;">
                        <label>ÿ™ÿ∫ŸäŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±</label>
                        <input type="password" id="newPassword" class="input-field" placeholder="ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿßŸÑÿ¨ÿØŸäÿØÿ©">
                        <button class="btn btn-danger" onclick="changePassword()" style="margin-top: 10px;">üîÑ ÿ™ÿ≠ÿØŸäÿ´</button>
                    </div>
                    
                    <hr style="margin: 30px 0;">
                    
                    <h3>üì§ ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™</h3>
                    <div style="text-align: center;">
                        <button class="btn btn-success" onclick="exportData()">üìä ÿ™ÿµÿØŸäÿ± JSON</button>
                        <button class="btn btn-warning" onclick="importData()" style="margin-right: 15px;">üì• ÿßÿ≥ÿ™Ÿäÿ±ÿßÿØ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™</button>
                    </div>
                    <input type="file" id="importFile" accept=".json" class="hidden" onchange="handleImport()">
                </div>
            </section>
        </div>
    </div>
    
    <script>
        // ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÖÿπ ÿßŸÑÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑŸÖÿ≠ŸÑŸä
        let employees = JSON.parse(localStorage.getItem('employees')) || [
            {id: 1, name: "ÿ£ÿ≠ŸÖÿØ ŸÖÿ≠ŸÖÿØ", employeeNumber: "EMP001", totalPoints: 0},
            {id: 2, name: "ŸÅÿßÿ∑ŸÖÿ© ÿπŸÑŸä", employeeNumber: "EMP002", totalPoints: 0},
            {id: 3, name: "ŸÖÿ≠ŸÖÿØ ÿÆÿßŸÑÿØ", employeeNumber: "EMP003", totalPoints: 0}
        ];
        
        let categories = JSON.parse(localStorage.getItem('categories')) || [
            {id: 1, name: "ÿßŸÑÿ≠ÿ∂Ÿàÿ±", maxPoints: 5, color: "#4ecdc4"},
            {id: 2, name: "ÿßŸÑÿ™ÿ∑Ÿàÿπ", maxPoints: 5, color: "#667eea"},
            {id: 3, name: "ÿßŸÑÿ™ÿπÿßŸàŸÜ ŸÖÿπ ÿßŸÑŸÇÿßÿ¶ÿØ", maxPoints: 3, color: "#f093fb"},
            {id: 4, name: "ÿßŸÑÿ¨ÿßŸáÿ≤Ÿäÿ©", maxPoints: 5, color: "#764ba2"},
            {id: 5, name: "ÿ≥ÿ±ÿπÿ© ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ©", maxPoints: 5, color: "#ff9a9e"},
            {id: 6, name: "ROSK", maxPoints: 5, color: "#36d1dc"}
        ];
        
        let evaluations = JSON.parse(localStorage.getItem('evaluations')) || {};
        let isAdminActive = false;
        let adminPassword = localStorage.getItem('adminPassword') || "admin2024";
        
        // ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('evaluationDate').value = new Date().toISOString().split('T')[0];
            
            loadAllData();
            renderEmployees();
            renderCategories();
            updateEmployeeSelect();
            updateAnalytics();
            updateDashboard();
            checkOnlineStatus();
            
            // ÿ™ÿ≠ÿØŸäÿ´ ÿ™ŸÑŸÇÿßÿ¶Ÿä ŸÉŸÑ 30 ÿ´ÿßŸÜŸäÿ©
            setInterval(saveAllData, 30000);
        });
        
        // ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©
        function saveAllData() {
            localStorage.setItem('employees', JSON.stringify(employees));
            localStorage.setItem('categories', JSON.stringify(categories));
            localStorage.setItem('evaluations', JSON.stringify(evaluations));
            localStorage.setItem('adminPassword', adminPassword);
            console.log('ÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖÿ≠ŸÑŸäÿßŸã ŸÅŸä:', new Date().toLocaleTimeString());
        }
        
        function loadAllData() {
            const savedEmployees = localStorage.getItem('employees');
            const savedCategories = localStorage.getItem('categories');
            const savedEvaluations = localStorage.getItem('evaluations');
            const savedPassword = localStorage.getItem('adminPassword');
            
            if (savedEmployees) employees = JSON.parse(savedEmployees);
            if (savedCategories) categories = JSON.parse(savedCategories);
            if (savedEvaluations) evaluations = JSON.parse(savedEvaluations);
            if (savedPassword) adminPassword = savedPassword;
        }
        
        // ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ¥ÿßÿ¥ÿßÿ™
        function showSection(sectionName) {
            // ÿ•ÿÆŸÅÿßÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ
            document.querySelectorAll('.section').forEach(section => {
                section.classList.remove('active');
            });
            
            // ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ™ŸÅÿπŸäŸÑ ŸÖŸÜ ÿ¨ŸÖŸäÿπ ÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿ™ŸÜŸÇŸÑ
            document.querySelectorAll('.nav-item').forEach(nav => {
                nav.classList.remove('active');
            });
            
            // ÿ•ÿ∏Ÿáÿßÿ± ÿßŸÑŸÇÿ≥ŸÖ ÿßŸÑŸÖÿ≠ÿØÿØ
            document.getElementById(sectionName).classList.add('active');
            event.target.classList.add('active');
            
            checkAdminAccess();
        }
        
        // ÿ•ÿØÿßÿ±ÿ© ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿßŸÑŸÖÿØŸäÿ±
        function toggleAdmin() {
            const password = document.getElementById('adminPassword').value;
            const statusEl = document.getElementById('authStatus');
            const statusBar = document.getElementById('statusBar');
            
            if (password === adminPassword) {
                isAdminActive = !isAdminActive;
                statusEl.textContent = isAdminActive ? 'üîì ŸÖŸèŸÅÿπŸÑ' : 'üîí ŸÖÿ≠ÿ∏Ÿàÿ±';
                statusBar.textContent = isAdminActive ? 'üîì ŸÖŸèŸÅÿπŸÑ - ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿßŸÑŸÖÿØŸäÿ± ŸÜÿ¥ÿ∑ÿ©' : 'üîí ÿ∫Ÿäÿ± ŸÖŸèŸÅÿπŸÑ - Ÿäÿ¨ÿ® ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ŸÉŸÖÿØŸäÿ±';
                statusBar.className = isAdminActive ? 'status-bar status-online' : 'status-bar';
                
                checkAdminAccess();
                showAlert(isAdminActive ? 'ÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿßŸÑŸÖÿØŸäÿ±' : 'ÿ™ŸÖ ÿ•ŸÑÿ∫ÿßÿ° ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿßŸÑŸÖÿØŸäÿ±', 'success');
            } else {
                showAlert('ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©!', 'error');
            }
        }
        
        function checkAdminAccess() {
            const adminElements = ['addEmployeeCard', 'saveEvaluationBtn', 'settingsCard'];
            adminElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.classList.toggle('hidden', !isAdminActive);
                }
            });
        }
        
        // ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ
        function renderEmployees() {
            const tbody = document.getElementById('employeesBody');
            tbody.innerHTML = '';
            
            employees.forEach(emp => {
                updateEmployeeTotalPoints(emp.id);
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><strong>${emp.name}</strong></td>
                    <td><span style="background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 5px 12px; border-radius: 12px; font-weight: 600;">${emp.employeeNumber}</span></td>
                    <td><strong style="color: #667eea; font-size: 1.3em;">${emp.totalPoints}</strong></td>
                    <td>
                        ${isAdminActive ? `
                            <button class="btn btn-danger" onclick="removeEmployee(${emp.id})">üóëÔ∏è ÿ≠ÿ∞ŸÅ</button>
                        ` : '<span style="color: #999;">ŸÖÿ≠ÿ∏Ÿàÿ±</span>'}
                    </td>
                `;
                tbody.appendChild(row);
            });
        }
        
        function addEmployee() {
            if (!isAdminActive) return;
            
            const name = document.getElementById('empName').value.trim();
            const empNumber = document.getElementById('empNumber').value.trim();
            
            if (!name || !empNumber) {
                showAlert('Ÿäÿ±ÿ¨Ÿâ ŸÖŸÑÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ', 'error');
                return;
            }
            
            if (employees.some(emp => emp.employeeNumber === empNumber)) {
                showAlert('ÿßŸÑÿ±ŸÇŸÖ ÿßŸÑŸàÿ∏ŸäŸÅŸä ŸÖŸàÿ¨ŸàÿØ ŸÖÿ≥ÿ®ŸÇÿßŸã', 'error');
                return;
            }
            
            const newId = Math.max(...employees.map(e => e.id)) + 1;
            employees.push({
                id: newId,
                name,
                employeeNumber: empNumber,
                totalPoints: 0
            });
            
            document.getElementById('empName').value = '';
            document.getElementById('empNumber').value = '';
            
            renderEmployees();
            updateEmployeeSelect();
            saveAllData();
            showAlert('ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸàÿ∏ŸÅ ÿ®ŸÜÿ¨ÿßÿ≠', 'success');
        }
        
        function removeEmployee(id) {
            if (!isAdminActive) return;
            
            if (confirm('ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ≠ÿ∞ŸÅ Ÿáÿ∞ÿß ÿßŸÑŸÖŸàÿ∏ŸÅÿü')) {
                employees = employees.filter(emp => emp.id !== id);
                delete evaluations[id];
                renderEmployees();
                updateEmployeeSelect();
                saveAllData();
                showAlert('ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸàÿ∏ŸÅ', 'success');
            }
        }
        
        // ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™
        function updateEmployeeSelect() {
            const select = document.getElementById('selectedEmployee');
            select.innerHTML = '<option value="">ÿßÿÆÿ™ÿ± ŸÖŸàÿ∏ŸÅÿßŸã...</option>';
            
            employees.forEach(emp => {
                const option = document.createElement('option');
                option.value = emp.id;
                option.textContent = `${emp.name} (${emp.employeeNumber})`;
                select.appendChild(option);
            });
            
            select.onchange = function() {
                const form = document.getElementById('evaluationForm');
                const saveBtn = document.getElementById('saveEvaluationBtn');
                if (this.value) {
                    form.classList.remove('hidden');
                    saveBtn.classList.toggle('hidden', !isAdminActive);
                    loadEmployeeEvaluation();
                } else {
                    form.classList.add('hidden');
                }
            };
        }
        
        function renderCategories() {
            const container = document.getElementById('categoriesGrid');
            container.innerHTML = '';
            
            categories.forEach(cat => {
                const card = document.createElement('div');
                card.className = 'category-card';
                card.style.background = cat.color;
                card.innerHTML = `
                    <h3>${cat.name}</h3>
                    <p>ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ŸÇÿµŸâ: ${cat.maxPoints} ŸÜŸÇÿßÿ∑</p>
                    <input type="number" 
                           class="points-input" 
                           id="points_${cat.id}" 
                           min="0" 
                           max="${cat.maxPoints}" 
                           value="0"
                           ${!isAdminActive ? 'disabled' : ''}>
                `;
                container.appendChild(card);
            });
        }
        
        function loadEmployeeEvaluation() {
            const empId = document.getElementById('selectedEmployee').value;
            const date = document.getElementById('evaluationDate').value;
            
            if (!empId || !date) return;
            
            const empEvals = evaluations[empId] && evaluations[empId][date] || {};
            
            categories.forEach(cat => {
                const input = document.getElementById(`points_${cat.id}`);
                if (input) {
                    input.value = empEvals[cat.id] || 0;
                }
            });
        }
        
        function saveEvaluation() {
            if (!isAdminActive) return;
            
            const empId = document.getElementById('selectedEmployee').value;
            const date = document.getElementById('evaluationDate').value;
            
            if (!empId || !date) {
                showAlert('Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ŸÖŸàÿ∏ŸÅ Ÿàÿ™ÿßÿ±ŸäÿÆ', 'error');
                return;
            }
            
            if (!evaluations[empId]) evaluations[empId] = {};
            if (!evaluations[empId][date]) evaluations[empId][date] = {};
            
            let totalPoints = 0;
            categories.forEach(cat => {
                const input = document.getElementById(`points_${cat.id}`);
                const points = parseInt(input.value) || 0;
                evaluations[empId][date][cat.id] = points;
                totalPoints += points;
            });
            
            updateEmployeeTotalPoints(empId);
            renderEmployees();
            updateDashboard();
            saveAllData();
            showAlert(`ÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿßŸÑÿ™ŸÇŸäŸäŸÖ: ${totalPoints} ŸÜŸÇÿ∑ÿ©`, 'success');
        }
        
        function updateEmployeeTotalPoints(empId) {
            const employee = employees.find(emp => emp.id == empId);
            if (!employee) return;
            
            let total = 0;
            const empEvals = evaluations[empId] || {};
            
            Object.values(empEvals).forEach(dayEvals => {
                Object.values(dayEvals).forEach(points => {
                    total += points;
                });
            });
            
            employee.totalPoints = total;
        }
        
        // ŸÑŸàÿ≠ÿ© ÿßŸÑŸÇŸäÿßÿØÿ©
        function updateDashboard() {
            employees.forEach(emp => updateEmployeeTotalPoints(emp.id));
            
            const topEmployees = [...employees]
                .sort((a, b) => b.totalPoints - a.totalPoints)
                .slice(0, 5);
            
            // ÿ™ÿ≠ÿØŸäÿ´ ŸÖŸàÿ∏ŸÅ ÿßŸÑÿ¥Ÿáÿ±
            if (topEmployees.length > 0) {
                document.getElementById('topEmployeeName').textContent = topEmployees[0].name;
                document.getElementById('topEmployeeScore').textContent = `ÿßŸÑŸÜŸÇÿßÿ∑: ${topEmployees[0].totalPoints}`;
            }
            
            // ÿ™ÿ≠ÿØŸäÿ´ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿ™ŸÅŸàŸÇŸäŸÜ
            const leadersGrid = document.getElementById('leadersGrid');
            leadersGrid.innerHTML = '';
            
            topEmployees.forEach((emp, index) => {
                const card = document.createElement('div');
                card.className = 'leader-card';
                card.innerHTML = `
                    <div style="font-size: 2em; font-weight: 900; margin-bottom: 10px;">#${index + 1}</div>
                    <h3>${emp.name}</h3>
                    <p style="opacity: 0.8; margin: 5px 0;">${emp.employeeNumber}</p>
                    <div style="font-size: 1.5em; font-weight: bold; margin-top: 10px;">${emp.totalPoints} ŸÜŸÇÿ∑ÿ©</div>
                `;
                leadersGrid.appendChild(card);
            });
        }
        
        // ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™
        function updateAnalytics() {
            const type = document.getElementById('analyticsType').value;
            const container = document.getElementById('analyticsGrid');
            
            employees.forEach(emp => updateEmployeeTotalPoints(emp.id));
            
            const totalEmployees = employees.length;
            const totalPoints = employees.reduce((sum, emp) => sum + emp.totalPoints, 0);
            const avgPoints = totalEmployees > 0 ? Math.round(totalPoints / totalEmployees) : 0;
            const topEmployee = employees.length > 0 ? 
                employees.reduce((max, emp) => emp.totalPoints > max.totalPoints ? emp : max).name : 'ŸÑÿß ŸäŸàÿ¨ÿØ';
            
            container.innerHTML = `
                <div class="stat-card" style="background: linear-gradient(135deg, #4ecdc4, #44a08d);">
                    <div class="stat-value">${totalEmployees}</div>
                    <div>ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #667eea, #764ba2);">
                    <div class="stat-value">${totalPoints}</div>
                    <div>ŸÖÿ¨ŸÖŸàÿπ ÿßŸÑŸÜŸÇÿßÿ∑</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #f093fb, #f5576c);">
                    <div class="stat-value">${avgPoints}</div>
                    <div>ŸÖÿ™Ÿàÿ≥ÿ∑ ÿßŸÑŸÜŸÇÿßÿ∑</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #ffecd2, #fcb69f); color: #333;">
                    <div class="stat-value" style="font-size: 1.5em;">${topEmployee}</div>
                    <div>ÿ£ŸÅÿ∂ŸÑ ŸÖŸàÿ∏ŸÅ</div>
                </div>
            `;
        }
        
        // ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™
        function renderCategoriesSettings() {
            const container = document.getElementById('categoriesSettings');
            container.innerHTML = '';
            
            categories.forEach(cat => {
                const div = document.createElement('div');
                div.style.cssText = 'display: flex; gap: 10px; align-items: center; margin-bottom: 15px; padding: 15px; background: rgba(255,255,255,0.1); border-radius: 10px;';
                div.innerHTML = `
                    <input type="text" value="${cat.name}" id="cat_name_${cat.id}" class="input-field" style="flex: 2;">
                    <input type="number" value="${cat.maxPoints}" id="cat_points_${cat.id}" class="input-field" style="width: 80px;" min="1" max="10">
                    <input type="color" value="${cat.color}" id="cat_color_${cat.id}" style="width: 50px; height: 40px; border: none; border-radius: 8px;">
                    <button class="btn btn-danger" onclick="removeCategory(${cat.id})">üóëÔ∏è</button>
                `;
                container.appendChild(div);
            });
        }
        
        function addNewCategory() {
            const newId = Math.max(...categories.map(c => c.id)) + 1;
            categories.push({
                id: newId,
                name: "ŸÅÿ¶ÿ© ÿ¨ÿØŸäÿØÿ©",
                maxPoints: 5,
                color: "#667eea"
            });
            renderCategoriesSettings();
        }
        
        function removeCategory(id) {
            if (categories.length <= 1) {
                showAlert('ŸÑÿß ŸäŸÖŸÉŸÜ ÿ≠ÿ∞ŸÅ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÅÿ¶ÿßÿ™', 'error');
                return;
            }
            categories = categories.filter(cat => cat.id !== id);
            renderCategoriesSettings();
        }
        
        function saveSettings() {
            categories.forEach(cat => {
                const nameInput = document.getElementById(`cat_name_${cat.id}`);
                const pointsInput = document.getElementById(`cat_points_${cat.id}`);
                const colorInput = document.getElementById(`cat_color_${cat.id}`);
                
                if (nameInput) cat.name = nameInput.value;
                if (pointsInput) cat.maxPoints = parseInt(pointsInput.value);
                if (colorInput) cat.color = colorInput.value;
            });
            
            renderCategories();
            saveAllData();
            showAlert('ÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™', 'success');
        }
        
        function changePassword() {
            const newPassword = document.getElementById('newPassword').value;
            if (newPassword.length < 6) {
                showAlert('ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ 6 ÿ£ÿ≠ÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ', 'error');
                return;
            }
            
            adminPassword = newPassword;
            document.getElementById('newPassword').value = '';
            saveAllData();
            showAlert('ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±', 'success');
        }
        
        // ÿ™ÿµÿØŸäÿ± Ÿàÿßÿ≥ÿ™Ÿäÿ±ÿßÿØ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
        function exportData() {
            const data = {
                employees,
                categories,
                evaluations,
                exportDate: new Date().toISOString(),
                version: '1.0'
            };
            
            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `employee_data_${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);
            
            showAlert('ÿ™ŸÖ ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠', 'success');
        }
        
        function importData() {
            document.getElementById('importFile').click();
        }
        
        function handleImport() {
            const file = document.getElementById('importFile').files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    
                    if (data.employees) employees = data.employees;
                    if (data.categories) categories = data.categories;
                    if (data.evaluations) evaluations = data.evaluations;
                    
                    renderEmployees();
                    renderCategories();
                    updateEmployeeSelect();
                    updateAnalytics();
                    updateDashboard();
                    saveAllData();
                    
                    showAlert('ÿ™ŸÖ ÿßÿ≥ÿ™Ÿäÿ±ÿßÿØ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠', 'success');
                } catch (error) {
                    showAlert('ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑŸÖŸÑŸÅ', 'error');
                }
            };
            reader.readAsText(file);
        }
        
        // ŸÅÿ≠ÿµ ÿ≠ÿßŸÑÿ© ÿßŸÑÿßÿ™ÿµÿßŸÑ
        function checkOnlineStatus() {
            function updateStatus() {
                const statusBar = document.getElementById('statusBar');
                if (navigator.onLine) {
                    document.body.classList.remove('offline');
                    if (isAdminActive) {
                        statusBar.textContent = 'üîì ŸÖŸèŸÅÿπŸÑ - ŸÖÿ™ÿµŸÑ ÿ®ÿßŸÑÿ•ŸÜÿ™ÿ±ŸÜÿ™';
                        statusBar.className = 'status-bar status-online';
                    }
                } else {
                    document.body.classList.add('offline');
                    statusBar.textContent = '‚ö†Ô∏è ÿ∫Ÿäÿ± ŸÖÿ™ÿµŸÑ - Ÿàÿ∂ÿπ ÿßŸÑÿπŸÖŸÑ ÿßŸÑŸÖÿ≠ŸÑŸä';
                    statusBar.className = 'status-bar';
                }
            }
            
            window.addEventListener('online', updateStatus);
            window.addEventListener('offline', updateStatus);
            updateStatus();
        }
        
        // ÿßŸÑŸÖÿ≥ÿßÿπÿØÿßÿ™
        function showAlert(message, type) {
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            alert.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 1000;
                min-width: 300px;
                animation: slideIn 0.3s ease-out;
            `;
            
            document.body.appendChild(alert);
            
            setTimeout(() => {
                alert.style.animation = 'slideOut 0.3s ease-in';
                setTimeout(() => alert.remove(), 300);
            }, 3000);
        }
        
        // ÿ™ÿ≠ÿØŸäÿ´ ÿ™ŸÑŸÇÿßÿ¶Ÿä ŸÑŸÑÿ®ŸäÿßŸÜÿßÿ™
        document.getElementById('evaluationDate').onchange = loadEmployeeEvaluation;
        
        // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸàÿßÿ¨Ÿáÿ© ŸÉŸÑ ÿØŸÇŸäŸÇÿ©
        setInterval(() => {
            if (isAdminActive) {
                renderCategoriesSettings();
                updateDashboard();
            }
        }, 60000);
        
        // CSS ŸÑŸÑÿ£ŸÜŸäŸÖŸäÿ¥ŸÜ
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>
